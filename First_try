from math import atan2
import random


def random_add(minimal, maximal, number):
	s = []
	for _ in range(number):
		s.append([random.randint(minimal, maximal), random.randint(minimal, maximal)])
	return s


def cross_product(x1_1, y1_1, x1_2, y1_2, x2_1, y2_1, x2_2, y2_2):
	first_vector_of_cross_product = [x1_1-x1_2, y1_1-y1_2]
	second_vector_of_cross_product = [x2_1-x2_2, y2_1-y2_2]
	their_cross_product = first_vector_of_cross_product[0] * second_vector_of_cross_product[1]\
						- first_vector_of_cross_product[1] * second_vector_of_cross_product[0]
	return their_cross_product


def intersection_of_two_vectors(x1_1, y1_1, x1_2, y1_2, x2_1, y2_1, x2_2, y2_2):
	vector_1 = [x1_1-x1_2, y1_1-y1_2]
	vector_2 = [x2_1-x2_2, y2_1-y2_2]
	# Function calculate vectors's coordinates
	if vector_1[0]*vector_2[1]-vector_1[1]*vector_2[0] == 0:
		print('Vectors are parallel')
	else:
		v1 = cross_product(x2_1, y2_1, x2_2, y2_2, x2_1, y2_1, x1_1, y1_1)
		v2 = cross_product(x2_1, y2_1, x2_2, y2_2, x2_1, y2_1, x1_2, y1_2)
		v3 = cross_product(x1_1, y1_1, x1_2, y1_2, x1_1, y1_1, x2_1, y2_1)
		v4 = cross_product(x1_1, y1_1, x1_2, y1_2, x1_1, y1_1, x2_2, y2_2)
		if v1*v2 < 0 and v3*v4 < 0:
			print('Vectors have intersection')


def distance(p0, p1=None):
	if p1 == None:
		p1 = anchor
	y_span = p0[1] - p1[1]
	x_span = p0[0] - p1[0]
	return y_span**2 + x_span**2


def polar_angle(p0, p1=None):
	if p1 == None:
		p1 = anchor
	y_span = p0[1] - p1[1]
	x_span = p0[0] - p1[0]
	return atan2(y_span, x_span)


def sort_polar_angle(s):
	if len(s) <= 1:
		return s
	smaller, equal, bigger = [], [], []
	random_anchor_angle = polar_angle(s[random.randint(0, len(s)-1)]) 		# choose random start of separating \
																			# vybirame nahodny start
	for element in s:
		element_angle = polar_angle(element)
		if element_angle < random_anchor_angle:
			smaller.append(element)
		elif element_angle == random_anchor_angle:
			equal.append(element)
		else:
			bigger.append(element)
	return sort_polar_angle(smaller) + sorted(equal, key=distance) + sort_polar_angle(bigger)


def det(p1,p2,p3):
	return   (p2[0]-p1[0])*(p3[1]-p1[1]) \
			-(p2[1]-p1[1])*(p3[0]-p1[0])


def graham_scan(points):
	global anchor
	min_id = None
	for i, (x, y) in enumerate(points):
		if min_id == None or y < points[min_id][1]:
			min_id = i
		if y == points[min_id][1] and x < points[min_id][0]:
			min_id =  i
	anchor = points[min_id]
	sorted_points = sort_polar_angle(points)
	del sorted_points[sorted_points.index(anchor)]
	konvex_obal = [anchor, sorted_points[0]]
	for s in sorted_points[1:]:
		while det(konvex_obal[-2], konvex_obal[-1], s) <= 0:
			del konvex_obal[-1]
			if len(konvex_obal) < 2:
				break
		konvex_obal.append(s)
	return konvex_obal


def convexni_obal(file_name):
	coord = []
	length_of_each_string = []
	convexni_obaly = []

	with open(file_name) as pattern_file:
		for line in pattern_file:
			for i in range(len(line.split())):
				coord.append(list(line.split()[i].split()[0].split(',')))
			length_of_each_string.append(len(line.split()))

	for i in range(len(coord)):
		coord[i][0] = int(coord[i][0])
		coord[i][1] = int(coord[i][1])
	start_p = 0
	finish_p = length_of_each_string[0]
	for i in range(len(length_of_each_string)):
		convexni_obaly.append(graham_scan(coord[start_p:finish_p]))
		start_p += length_of_each_string[i]
		if (i+1) == len(length_of_each_string):
			break
		else:
			finish_p += length_of_each_string[i+1]
	return convexni_obaly


crd = convexni_obal('coordinates')
print(crd)

